SELECT
CASE
WHEN SAMPLEID IS NULL THEN NULL 
ELSE SAFE_CAST(SAMPLEID AS FLOAT64) 
 END as pool_identification_number, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(RIDRETH1 AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Mexican American' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(RIDRETH1 AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(2 AS FLOAT64),0) AS INT64) THEN 'Other Hispanic' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(RIDRETH1 AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(3 AS FLOAT64),0) AS INT64) THEN 'Non-Hispanic White' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(RIDRETH1 AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(4 AS FLOAT64),0) AS INT64) THEN 'Non-Hispanic Black' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(RIDRETH1 AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(5 AS FLOAT64),0) AS INT64) THEN 'Other Race, Including Multiracial' -- categorize numeric values
WHEN RIDRETH1 IS NULL THEN NULL 
ELSE SAFE_CAST(RIDRETH1 AS STRING) 
 END as race_hispanic_origin, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(RIDAGGRP AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN '12-19' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(RIDAGGRP AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(2 AS FLOAT64),0) AS INT64) THEN '20-39' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(RIDAGGRP AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(3 AS FLOAT64),0) AS INT64) THEN '40-59' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(RIDAGGRP AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(4 AS FLOAT64),0) AS INT64) THEN '60+' -- categorize numeric values
WHEN RIDAGGRP IS NULL THEN NULL 
ELSE SAFE_CAST(RIDAGGRP AS STRING) 
 END as age_group, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(RIAGENDR AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Male' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(RIAGENDR AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(2 AS FLOAT64),0) AS INT64) THEN 'Female' -- categorize numeric values
WHEN RIAGENDR IS NULL THEN NULL 
ELSE SAFE_CAST(RIAGENDR AS STRING) 
 END as gender, 

CASE
WHEN RIANSMP IS NULL THEN NULL 
ELSE SAFE_CAST(RIANSMP AS FLOAT64) 
 END as number_of_samples_in_a_pool, 

CASE
WHEN WTSMSMPA IS NULL THEN NULL 
ELSE SAFE_CAST(WTSMSMPA AS FLOAT64) 
 END as sum_of_adjusted_subsample_weights, 

CASE
WHEN LBC028 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC028 AS FLOAT64) 
 END as pcb_28_pg_g, 

CASE
WHEN LBC028LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC028LA AS FLOAT64) 
 END as pcb_28_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD028LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD028LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD028LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD028LC AS STRING) 
 END as pcb_28_comment_code, 

CASE
WHEN LBC066 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC066 AS FLOAT64) 
 END as pcb_66_pg_g, 

CASE
WHEN LBC066LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC066LA AS FLOAT64) 
 END as pcb_66_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD066LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD066LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD066LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD066LC AS STRING) 
 END as pcb_66_comment_code, 

CASE
WHEN LBC074 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC074 AS FLOAT64) 
 END as pcb_74_pg_g, 

CASE
WHEN LBC074LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC074LA AS FLOAT64) 
 END as pcb_74_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD074LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD074LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD074LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD074LC AS STRING) 
 END as pcb_74_comment_code, 

CASE
WHEN LBC099 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC099 AS FLOAT64) 
 END as pcb_99_pg_g, 

CASE
WHEN LBC099LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC099LA AS FLOAT64) 
 END as pcb_99_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD099LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD099LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD099LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD099LC AS STRING) 
 END as pcb_99_comment_code, 

CASE
WHEN LBC105 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC105 AS FLOAT64) 
 END as pcb_105_pg_g, 

CASE
WHEN LBC105LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC105LA AS FLOAT64) 
 END as pcb_105_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD105LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD105LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD105LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD105LC AS STRING) 
 END as pcb_105_comment_code, 

CASE
WHEN LBC114 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC114 AS FLOAT64) 
 END as pcb_114_pg_g, 

CASE
WHEN LBC114LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC114LA AS FLOAT64) 
 END as pcb_114_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD114LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD114LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD114LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD114LC AS STRING) 
 END as pcb_114_comment_code, 

CASE
WHEN LBC118 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC118 AS FLOAT64) 
 END as pcb_118_pg_g, 

CASE
WHEN LBC118LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC118LA AS FLOAT64) 
 END as pcb_118_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD118LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD118LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD118LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD118LC AS STRING) 
 END as pcb_118_comment_code, 

CASE
WHEN LBC138 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC138 AS FLOAT64) 
 END as pcb_138_pg_g, 

CASE
WHEN LBC138LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC138LA AS FLOAT64) 
 END as pcb_138_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD138LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD138LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD138LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD138LC AS STRING) 
 END as pcb_138_comment_code, 

CASE
WHEN LBC146 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC146 AS FLOAT64) 
 END as pcb_146_pg_g, 

CASE
WHEN LBC146LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC146LA AS FLOAT64) 
 END as pcb_146_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD146LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD146LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD146LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD146LC AS STRING) 
 END as pcb_146_comment_code, 

CASE
WHEN LBC153 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC153 AS FLOAT64) 
 END as pcb_153_pg_g, 

CASE
WHEN LBC153LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC153LA AS FLOAT64) 
 END as pcb_153_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD153LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD153LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD153LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD153LC AS STRING) 
 END as pcb_153_comment_code, 

CASE
WHEN LBC156 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC156 AS FLOAT64) 
 END as pcb_156_pg_g, 

CASE
WHEN LBC156LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC156LA AS FLOAT64) 
 END as pcb_156_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD156LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD156LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD156LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD156LC AS STRING) 
 END as pcb_156_comment_code, 

CASE
WHEN LBC157 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC157 AS FLOAT64) 
 END as pcb_157_pg_g, 

CASE
WHEN LBC157LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC157LA AS FLOAT64) 
 END as pcb_157_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD157LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD157LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD157LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD157LC AS STRING) 
 END as pcb_157_comment_code, 

CASE
WHEN LBC167 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC167 AS FLOAT64) 
 END as pcb_167_pg_g, 

CASE
WHEN LBC167LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC167LA AS FLOAT64) 
 END as pcb_167_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD167LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD167LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD167LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD167LC AS STRING) 
 END as pcb_167_comment_code, 

CASE
WHEN LBC170 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC170 AS FLOAT64) 
 END as pcb_170_pg_g, 

CASE
WHEN LBC170LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC170LA AS FLOAT64) 
 END as pcb_170_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD170LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD170LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD170LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD170LC AS STRING) 
 END as pcb_170_comment_code, 

CASE
WHEN LBC178 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC178 AS FLOAT64) 
 END as pcb_178_pg_g, 

CASE
WHEN LBC178LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC178LA AS FLOAT64) 
 END as pcb_178_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD178LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD178LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD178LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD178LC AS STRING) 
 END as pcb_178_comment_code, 

CASE
WHEN LBC180 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC180 AS FLOAT64) 
 END as pcb_180_pg_g, 

CASE
WHEN LBC180LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC180LA AS FLOAT64) 
 END as pcb_180_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD180LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD180LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD180LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD180LC AS STRING) 
 END as pcb_180_comment_code, 

CASE
WHEN LBC183 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC183 AS FLOAT64) 
 END as pcb_183_pg_g, 

CASE
WHEN LBC183LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC183LA AS FLOAT64) 
 END as pcb_183_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD183LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD183LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD183LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD183LC AS STRING) 
 END as pcb_183_comment_code, 

CASE
WHEN LBC187 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC187 AS FLOAT64) 
 END as pcb_187_pg_g, 

CASE
WHEN LBC187LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC187LA AS FLOAT64) 
 END as pcb_187_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD187LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD187LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD187LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD187LC AS STRING) 
 END as pcb_187_comment_code, 

CASE
WHEN LBC189 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC189 AS FLOAT64) 
 END as pcb_189_pg_g, 

CASE
WHEN LBC189LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC189LA AS FLOAT64) 
 END as pcb_189_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD189LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD189LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD189LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD189LC AS STRING) 
 END as pcb_189_comment_code, 

CASE
WHEN LBC194 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC194 AS FLOAT64) 
 END as pcb_194_pg_g, 

CASE
WHEN LBC194LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC194LA AS FLOAT64) 
 END as pcb_194_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD194LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD194LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD194LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD194LC AS STRING) 
 END as pcb_194_comment_code, 

CASE
WHEN LBC196 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC196 AS FLOAT64) 
 END as pcb_196_pg_g, 

CASE
WHEN LBC196LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC196LA AS FLOAT64) 
 END as pcb_196_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD196LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD196LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD196LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD196LC AS STRING) 
 END as pcb_196_comment_code, 

CASE
WHEN LBC199 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC199 AS FLOAT64) 
 END as pcb_199_pg_g, 

CASE
WHEN LBC199LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC199LA AS FLOAT64) 
 END as pcb_199_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD199LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD199LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD199LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD199LC AS STRING) 
 END as pcb_199_comment_code, 

CASE
WHEN LBC206 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC206 AS FLOAT64) 
 END as pcb_206_pg_g, 

CASE
WHEN LBC206LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC206LA AS FLOAT64) 
 END as pcb_206_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD206LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD206LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD206LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD206LC AS STRING) 
 END as pcb_206_comment_code, 

CASE
WHEN LBC209 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC209 AS FLOAT64) 
 END as pcb_209_pg_g, 

CASE
WHEN LBC209LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC209LA AS FLOAT64) 
 END as pcb_209_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD209LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD209LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD209LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD209LC AS STRING) 
 END as pcb_209_comment_code, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(ETHNICTY AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Non-Hispanic White' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(ETHNICTY AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(2 AS FLOAT64),0) AS INT64) THEN 'Non-Hispanic Black' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(ETHNICTY AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(3 AS FLOAT64),0) AS INT64) THEN 'Mexican American' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(ETHNICTY AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(4 AS FLOAT64),0) AS INT64) THEN 'Other' -- categorize numeric values
WHEN ETHNICTY IS NULL THEN NULL 
ELSE SAFE_CAST(ETHNICTY AS STRING) 
 END as ethnicity_recode, 

CASE
WHEN LBC044 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC044 AS FLOAT64) 
 END as pcb_44_ng_g, 

CASE
WHEN LBC044LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC044LA AS FLOAT64) 
 END as pcb_44_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD044LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD044LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD044LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD044LC AS STRING) 
 END as pcb_44_comment_code, 

CASE
WHEN LBC049 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC049 AS FLOAT64) 
 END as pcb_49_ng_g, 

CASE
WHEN LBC049LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC049LA AS FLOAT64) 
 END as pcb_49_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD049LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD049LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD049LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD049LC AS STRING) 
 END as pcb_49_comment_code, 

CASE
WHEN LBC052 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC052 AS FLOAT64) 
 END as pcb_52_ng_g, 

CASE
WHEN LBC052LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC052LA AS FLOAT64) 
 END as pcb_52_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD052LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD052LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD052LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD052LC AS STRING) 
 END as pcb_52_comment_code, 

CASE
WHEN LBC087 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC087 AS FLOAT64) 
 END as pcb_87_ng_g, 

CASE
WHEN LBC087LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC087LA AS FLOAT64) 
 END as pcb_87_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD087LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD087LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD087LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD087LC AS STRING) 
 END as pcb_87_comment_code, 

CASE
WHEN LBC101 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC101 AS FLOAT64) 
 END as pcb_101_ng_g, 

CASE
WHEN LBC101LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC101LA AS FLOAT64) 
 END as pcb_101_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD101LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD101LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD101LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD101LC AS STRING) 
 END as pcb_101_comment_code, 

CASE
WHEN LBC110 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC110 AS FLOAT64) 
 END as pcb_110_ng_g, 

CASE
WHEN LBC110LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC110LA AS FLOAT64) 
 END as pcb_110_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD110LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD110LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD110LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD110LC AS STRING) 
 END as pcb_110_comment_code, 

CASE
WHEN LBC123 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC123 AS FLOAT64) 
 END as pcb_123_ng_g, 

CASE
WHEN LBC123LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC123LA AS FLOAT64) 
 END as pcb_123_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD123LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD123LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD123LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD123LC AS STRING) 
 END as pcb_123_comment_code, 

CASE
WHEN LBC128 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC128 AS FLOAT64) 
 END as pcb_128_ng_g, 

CASE
WHEN LBC128LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC128LA AS FLOAT64) 
 END as pcb_128_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD128LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD128LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD128LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD128LC AS STRING) 
 END as pcb_128_comment_code, 

CASE
WHEN LBC149 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC149 AS FLOAT64) 
 END as pcb_149_ng_g, 

CASE
WHEN LBC149LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC149LA AS FLOAT64) 
 END as pcb_149_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD149LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD149LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD149LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD149LC AS STRING) 
 END as pcb_149_comment_code, 

CASE
WHEN LBC151 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC151 AS FLOAT64) 
 END as pcb_151_ng_g, 

CASE
WHEN LBC151LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC151LA AS FLOAT64) 
 END as pcb_151_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD151LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD151LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD151LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD151LC AS STRING) 
 END as pcb_151_comment_code, 

CASE
WHEN LBC172 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC172 AS FLOAT64) 
 END as pcb_172_ng_g, 

CASE
WHEN LBC172LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC172LA AS FLOAT64) 
 END as pcb_172_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD172LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD172LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD172LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD172LC AS STRING) 
 END as pcb_172_comment_code, 

CASE
WHEN LBC177 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC177 AS FLOAT64) 
 END as pcb_177_ng_g, 

CASE
WHEN LBC177LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC177LA AS FLOAT64) 
 END as pcb_177_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD177LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD177LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD177LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD177LC AS STRING) 
 END as pcb_177_comment_code, 

CASE
WHEN LBC195 IS NULL THEN NULL 
ELSE SAFE_CAST(LBC195 AS FLOAT64) 
 END as pcb_195_ng_g, 

CASE
WHEN LBC195LA IS NULL THEN NULL 
ELSE SAFE_CAST(LBC195LA AS FLOAT64) 
 END as pcb_195_lipid_adj_ng_g, 

CASE
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD195LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(0 AS FLOAT64),0) AS INT64) THEN 'At or above the detection limit' -- categorize numeric values
WHEN SAFE_CAST(ROUND(SAFE_CAST(LBD195LC AS FLOAT64),0) AS INT64) = SAFE_CAST(ROUND(SAFE_CAST(1 AS FLOAT64),0) AS INT64) THEN 'Below lower detection limit' -- categorize numeric values
WHEN LBD195LC IS NULL THEN NULL 
ELSE SAFE_CAST(LBD195LC AS STRING) 
 END as pcb_195_comment_code, 

start_year,
end_year,
last_updated,
published_date,
parquet_filename,
data_file_url,
doc_file_url,
dataset,
 FROM {{ ref('stg_non_dioxin_like_polychlorinated_biphenyls_mono_ortho_substituted_polychlorinated_biphenyls_pooled_samples_laboratory') }}

/* 
Docs utilized to generate this SQL can be found at:
https://wwwn.cdc.gov/Nchs/Nhanes/2009-2010/PCBPOL_F.htm
https://wwwn.cdc.gov/Nchs/Nhanes/2007-2008/PCBPOL_E.htm
https://wwwn.cdc.gov/Nchs/Nhanes/2005-2006/PCBPOL_D.htm
*/
